#####################################################################################
# Copyright 2020 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################
#
# @name Variable from Consul
# @description Gets a key-value dictionnary from Consul given the secret path
#
# @documentation To use the generated variable, you must use the form `${variable_prefix.variable_name}` with each name replaced with the parameters of this method.
#
# Access to the Consul has to be configured on each agent in /var/rudder/plugin-resources/consul.json. A sample config file is provided in /opt/rudder/share/plugins/consul/sample_consul.json
#
# This generic method will report as performing a repair when it fetches a key, and an error when it fails to do so.
#
# @parameter variable_prefix The prefix of the variable name
# @parameter variable_name   The variable to define, the full name will be variable_prefix.variable_name
# @parameter path            Consul kv path
#
# @class_prefix Variable_from_consul
# @class_parameter path

bundle agent variable_from_consul(variable_prefix, variable_name, path)
{
  vars:
      "old_class_prefix" string => canonify("variable_from_consul_${path}");
      "promisers" slist => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
      "class_prefix" string => canonify(join("_", "promisers"));
      "args" slist => {"${variable_prefix}", "${variable_name}", "${path}"};

    pass1::
      "${variable_prefix}.${variable_name}" string => execresult('/usr/bin/curl -s -H "X-Consul-Token: ${consul.config[token]}" http://${consul.config[server_addr]}/v1/kv/${path}?raw', "noshell");

  classes:
      "pass2" expression => "pass1";
      "pass1";

    pass2::
      "variable_defined" expression => isvariable("${variable_prefix}.${variable_name}");  
      "config_defined" expression => isvariable("consul.config");

  methods:
    pass2.variable_defined::
      "success" usebundle => _classes_success("${old_class_prefix}");
      "success" usebundle => _classes_success("${class_prefix}");
      "report" usebundle => _log("Variable definition from the ${path} secret path in consul", "${old_class_prefix}", "${class_prefix}", @{args});

    pass2.!variable_defined.!consul_reachable::
      "failure" usebundle => _classes_failure("${old_class_prefix}");
      "failure" usebundle => _classes_failure("${class_prefix}");
      "report" usebundle => _log("Consul server unreachable. Variable definition from the ${path} secret path in Consul", "${old_class_prefix}", "${class_prefix}", @{args}),
        ifvarclass => "config_defined";
      "report" usebundle => _log("Undefined configuration. Variable definition from the ${path} secret path in Consul", "${old_class_prefix}", "${class_prefix}", @{args}),
        ifvarclass => "!config_defined";

    pass2.!variable_defined.consul_reachable::
      "failure" usebundle => _classes_failure("${old_class_prefix}");
      "failure" usebundle => _classes_failure("${class_prefix}");
      "report" usebundle => _log("Consul server is reachable, but your request failed. Check your auth and secret path. Variable definition from the ${path} secret path in Consul", "${old_class_prefix}", "${class_prefix}", @{args});
	
}

